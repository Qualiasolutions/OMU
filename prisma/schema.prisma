// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                 String               @id @default(cuid())
  name               String?
  email              String               @unique
  emailVerified      DateTime?
  image              String?
  password           String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  accounts           Account[]
  sessions           Session[]
  socialAccounts     SocialAccount[]
  posts              Post[]
  scheduledPosts     ScheduledPost[]
  teams              TeamMember[]
  postTemplates      PostTemplate[]
  mediaLibraryItems  MediaLibraryItem[]
  aiGeneratedContent AiGeneratedContent[]
}

// NextAuth models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Social media accounts connected to users
model SocialAccount {
  id                String          @id @default(cuid())
  userId            String
  type              SocialPlatform
  platformAccountId String?
  username          String?
  profileUrl        String?
  accessToken       String?         @db.Text
  refreshToken      String?         @db.Text
  expiresAt         DateTime?
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts             Post[]
  scheduledPosts    ScheduledPost[]

  @@unique([userId, type])
}

enum SocialPlatform {
  TWITTER
  FACEBOOK
  INSTAGRAM
  LINKEDIN
  TIKTOK
  YOUTUBE
  PINTEREST
  THREADS
}

// Posts created and posted to social media
model Post {
  id               String        @id @default(cuid())
  userId           String
  socialAccountId  String?
  content          String
  mediaUrls        String[]
  publishedAt      DateTime?
  scheduledPostId  String?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  status           PostStatus    @default(DRAFT)
  analyticsData    Json?
  user             User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccount    SocialAccount? @relation(fields: [socialAccountId], references: [id])
  scheduledPost    ScheduledPost? @relation(fields: [scheduledPostId], references: [id])
}

enum PostStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  FAILED
}

// Schedule for posting to social media
model ScheduledPost {
  id              String          @id @default(cuid())
  userId          String
  socialAccountId String
  content         String
  mediaUrls       String[]
  scheduledFor    DateTime
  timezone        String
  recurringType   RecurringType?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  status          ScheduleStatus  @default(PENDING)
  user            User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  socialAccount   SocialAccount   @relation(fields: [socialAccountId], references: [id])
  posts           Post[]
}

enum RecurringType {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
}

enum ScheduleStatus {
  PENDING
  POSTED
  FAILED
  CANCELLED
}

// Post templates for reuse
model PostTemplate {
  id          String   @id @default(cuid())
  userId      String
  name        String
  content     String
  mediaUrls   String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Media library for storing images and videos
model MediaLibraryItem {
  id          String      @id @default(cuid())
  userId      String
  url         String
  type        MediaType
  name        String
  description String?
  tags        String[]
  size        Int
  dimensions  String?     // Format: "widthxheight"
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum MediaType {
  IMAGE
  VIDEO
  GIF
}

// Team collaboration
model Team {
  id          String       @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  members     TeamMember[]
}

model TeamMember {
  id        String     @id @default(cuid())
  teamId    String
  userId    String
  role      TeamRole
  joinedAt  DateTime   @default(now())
  team      Team       @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([teamId, userId])
}

enum TeamRole {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

// AI generated content
model AiGeneratedContent {
  id        String   @id @default(cuid())
  userId    String
  prompt    String
  content   String
  type      AiContentType
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum AiContentType {
  CAPTION
  HASHTAGS
  IMAGE_DESCRIPTION
  CONTENT_IDEAS
}
